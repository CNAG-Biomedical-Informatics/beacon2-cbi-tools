#!/usr/bin/env perl
#
#   BFF-tools: Script to process VCF/BFF data
#   It has four modes:
#     1. vcf:
#         a) Annotates VCF with SnpEff (optional)
#         b) Serializes VCF to BFF
#     2. load: Transfers BFF data to MongoDB
#     3. full: Combines vcf and load modes
#     4. validate: Resorts to utils/bff-validator
#
#   Last Modified: March/22/2025
#
#   Version: 2.0.8
#
#   Copyright (C) 2021-2022 Manuel Rueda - CRG
#   Copyright (C) 2023-2025 Manuel Rueda - CNAG (manuel.rueda@cnag.eu)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <https://www.gnu.org/licenses/>.
#
#   If this program helps you in your research, please cite.

use strict;
use warnings;
use autodie;
use utf8;
use feature         qw(say);
use Cwd             qw(abs_path);
use Term::ANSIColor qw(:constants);
use JSON::XS;
use Path::Tiny;
use Data::Dumper;
use Time::HiRes qw(time sleep);
use threads;
use threads::shared;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use BFF::Help;
use BFF::Config;
use BFF::Tools;

#############################################################
#            Variables definition                           #
#############################################################

# Set STDOUT to output UTF-8
binmode STDOUT, ':encoding(UTF-8)';

# Personalize warn and die functions
$SIG{__WARN__} = sub { warn BOLD YELLOW "Warn: ", @_ };
$SIG{__DIE__}  = sub { die BOLD RED "Error: ", @_ };

# Check if the first argument is "validate" and call the subroutine if so.
if ( ( $ARGV[0] // '' ) eq 'validate' ) {
    handle_validate();
}

# bff-tools version
my $version = '2.0.8';

# Initialize a few more variables
my $prompt        = 'Info:';
my $warn          = 'Warn:';
my $error         = 'Error:';
my $spacer        = '*' x 32;
my $arrow         = '=>';
my $cmd           = '';
my $author        = 'Author: Manuel Rueda, PhD';
my $license       = 'License: GNU General Public License v3';
my $bfftools_path = abs_path($0);

# We tell Perl to flush right away STDOUT data
$| = 1;

# Format for Data::Dumper
$Data::Dumper::Terse = 1;

##############################################################
#                 Code starts here                           #
##############################################################

# Parsing arguments/options and getting help if needed
my $arg = Help::usage($version);

# Reading the configuration values from the config file
# NB: We'll avoid assigning $param->{foo} to vars unless their value changes often
my $config = Config::read_config_file( $arg->{configfile} );

# Add version to $config
$config->{version} = $version;

# Reading the parameters from the parameters file.
my $param = Config::read_param_file($arg);

# Start printing information
say $prompt;
say BOLD CYAN "$prompt üöÄ BFF-Tools $version", RESET;
say "$prompt üñ•Ô∏è bff-tools exe: $bfftools_path";
say "$prompt ‚úçÔ∏è $author";
say "$prompt üìú $license\n$prompt";

# Print arguments to stdout
say BOLD YELLOW, "$prompt üîß ARGUMENTS USED:", RESET;
say WHITE "$prompt mode: $arg->{mode}";
my @tmp_keys =
  qw (inputfile configfile paramfile threads debug verbose nocolor projectdir-override);
my @tmp_vals = qw ( i c p t debug verbose nc po);
my %argument;
@argument{@tmp_keys} = @tmp_vals;
for my $argument ( sort keys %argument ) {
    say WHITE "$prompt --$argument{$argument} $arg->{$argument}"
      if $arg->{$argument};
}

# Printing the config values to stdout according to the format below
say WHITE "$prompt";
say BOLD BLUE, "$prompt ‚öôÔ∏è  CONFIGURATION VALUES:", RESET;

$~ = "CONFIG";
my $l_config = '';
foreach $l_config ( sort keys %{$config} ) {
    write;
}

format CONFIG =
@|||||@<<<<<<<<<<<<<<<< @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$prompt, $l_config, $arrow, $config->{$l_config}
.

# Printing the params to stdout according to the format below
say WHITE "$prompt";
say BOLD GREEN, "$prompt üé¨ BFF-TOOLS PARAMETERS:", RESET;

# Creating a tmp hash to deal with 2D hash
my %tmp_param = %{$param};

for my $nested (qw (pipeline bff)) {
    $tmp_param{$nested} = 'See ' . $tmp_param{log};
}
$~ = "PARAMS";
my $l_param = '';
foreach $l_param ( sort keys %tmp_param ) {
    write;
}

format PARAMS =
@|||||@<<<<<<<<<<<<<<<< @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$prompt, $l_param, $arrow, $tmp_param{$l_param}
.

# Start bff-tools
say $prompt;
say BOLD CYAN "$prompt üö¶ STARTING BFF-TOOLS FUN";
say RESET "$prompt $spacer";

# Create the working dir
mkdir $param->{projectdir};

# Creating a log file in JSON
my $coder = JSON::XS->new->utf8->canonical->pretty;
my $json =
  $coder->encode( { arg => $arg, config => $config, param => $param } );    # keys created on the fly with anonymous hash
my $job_log = $param->{log};
path($job_log)->spew($json);

# We'll use a ref to an anonymous hash to load the object $beacon
my $genome     = $param->{genome};                                          # To alleviate nomenclature
my $rah_beacon = {
    jobid        => $param->{jobid},
    datasetid    => $param->{datasetid},
    annotate     => $param->{annotate},
    inputfile    => $arg->{inputfile},
    projectdir   => $param->{projectdir},
    bcftools     => $config->{bcftools},
    snpeff       => $config->{snpeff},
    snpsift      => $config->{snpsift},
    tmpdir       => $config->{tmpdir},
    genome       => $genome,
    clinvar      => $config->{"${genome}clinvar"},
    cosmic       => $config->{"${genome}cosmic"},
    dbnsfp       => $config->{"${genome}dbnsfp"},
    reference    => $config->{"${genome}fasta"},
    dbnsfpset    => $config->{dbnsfpset},
    vcf2bff      => $config->{vcf2bff},
    zip          => $param->{zip},
    bff2json     => $config->{bff2json},
    json2html    => $config->{json2html},
    bash4bff     => $config->{bash4bff},
    bash4html    => $config->{bash4html},
    bash4mongodb => $config->{bash4mongodb},
    browserdir   => $config->{browserdir},
    paneldir     => $config->{paneldir},
    assetsdir    => $config->{assetsdir},
    gvvcfjson    => $param->{gvvcfjson},
    mongoimport  => $config->{mongoimport},
    mongodburi   => $config->{mongodburi},
    mongosh      => $config->{mongosh},
    bff          => $param->{bff},
    debug        => $arg->{debug},
    verbose      => $arg->{verbose}
};

# Loading the object
my $beacon = Tools->new($rah_beacon);

# Define the hash with emoji values
my %pipeline_emoji = (
    vcf2bff     => "üß¨",
    bff2mongodb => "üíæ",
    bff2html    => "üåê",
);

# Now submitting the pipelines (order matters) through bash scripts
my @pipelines = ( 'vcf2bff', 'bff2html', 'bff2mongodb' );
for my $pipeline (@pipelines) {
    if ( $param->{pipeline}{$pipeline} ) {
        say "$prompt Running the pipeline $pipeline_emoji{$pipeline} ",
          uc($pipeline), '...';
        run_with_spinner( sub { $beacon->$pipeline() } );
    }
}

# End bff-tools
say "$prompt $spacer";
say BOLD GREEN, "$prompt ‚úÖ BFF-TOOLS FINISHED OK", RESET;

# Optional message
say "$prompt Date: ",            scalar localtime if $arg->{verbose};
say "$prompt Running time(s): ", time - $^T       if $arg->{verbose};

# Say goodbye message
my $goodbye = GoodBye->new();
say WHITE, $prompt, ' üëã ', $goodbye->say_goodbye();

##############################################################
#                   Code ends here                           #
##############################################################

#------------------------------------------------------------
#                  Helper functions                         #
#------------------------------------------------------------

sub handle_validate {

    # Remove the "validate" argument
    shift @ARGV;

    # Execute the bff-validator utility with remaining arguments
    system( "$Bin/../utils/bff_validator/bff-validator", @ARGV ) == 0
      or die RED "Error: could not run bff-validator: $!" . RESET;

    # Exit with the return code from the system call
    exit( $? >> 8 );
}

# Function that runs a code reference with a spinner.
sub run_with_spinner {
    my $code_ref = shift;

    # Run code directly if not interactive.
    return $code_ref->() unless -t STDOUT;

    my $done : shared = 0;
    my $spinner_thread = threads->create(
        sub {
            my @spinner = qw(‚†ã ‚†ô ‚†π ‚†∏ ‚†º ‚†¥ ‚†¶ ‚†ß ‚†á ‚†è);
            my $i       = 0;
            my $start   = time();
            my $delay   = 1;
            while ( !$done ) {
                my $spinner_char =
                    BOLD
                  . YELLOW
                  . $prompt . ' '
                  . $spinner[ $i % @spinner ]
                  . RESET;
                my $elapsed = time() - $start;
                my $seconds = int( $elapsed % 60 );
                my $minutes = int( ( $elapsed / 60 ) % 60 );
                my $hours   = int( $elapsed / 3600 );
                my $elapsed_str =
                  sprintf( "%02dh %02dm %02ds", $hours, $minutes, $seconds );
                my $message =
                    BOLD
                  . WHITE
                  . " Please be patient - this job may take a while ‚è≥ (elapsed: $elapsed_str)..."
                  . RESET;
                print "\r$spinner_char$message";
                $i++;
                sleep $delay;
            }

            # Clear the spinner line using ANSI escape sequence without adding a newline.
            print "\r\e[2K";
        }
    );

    my $result;
    my $error;
    {
        local $@;
        eval {
            $result = $code_ref->();
            1;
        } or $error = $@;
    }

    # Signal spinner to stop and join its thread.
    $done = 1;
    $spinner_thread->join();

    # Rethrow any error so it appears cleanly.
    die $error if $error;

    return $result;
}

__END__

=head1 NAME

C<bff-tools>: A unified command-line toolkit for working with Beacon v2 Models data. It allows users to B<annotate> and B<convert> VCF files into the C<genomicVariations> entity using the Beacon-Friendly Format (BFF), B<validate> metadata files (XLSX or JSON) against Beacon v2 schema definitions and B<load> BFF-formatted data into a B<MongoDB> instance.

This tool is part of the C<beacon2-cbi-tools> repository and is designed to support Beacon v2 data ingestion pipelines, metadata validation workflows, and federated data sharing initiatives.

=head1 SYNOPSIS

bff-tools <mode> [-arguments] [-options]

  Mode:
    vcf
       -i | --input <file>            Requires a VCF.gz file
                                      (May also use a parameters file)

    load
                                      (Requires a parameters file specifying BFF files)

     full (vcf + load)
       -i | --input <file>            Requires a VCF.gz file
                                      (May also use a parameters file)

       Options (for vcf / load / full):
       -c | --config <file>           Requires a configuration file
       -p | --param <file>            Requires a parameters file (optional)
       -projectdir-override <path>    Custom project directory path (overrides config)
       -t | --threads <number>        Number of threads (optional, mainly for VCF)

    validate
       -i | --input <file(s)>         One or more XLSX/JSON metadata files
       -s | --schema-dir <directory>  Directory containing JSON schemas
       -o | --out-dir <directory>     Output directory for validated data
       -gv                            Set this option if you want to process <genomicVariations> entity
       -ignore-validation             Writes JSON collection regardless of results from validation against JSON schemas (AYOR!)

       Experimental:
       -gv-vcf                        Set this option to read <genomicVariations.json> from <beacon vcf> (with one document per line)


     Generic Options:
       -h                             Brief help message
       -man                           Full documentation
       -v                             Display version information
       -debug <level>                 Print debugging information (1 to 5)
       -verbose                       Enable verbosity
       -nc | --no-color               Do not print colors to STDOUT

=head1 DESCRIPTION

=head3 C<bff-tools>

C<bff-tools> is a command-line toolkit with four operational modes for working with Beacon v2 data:

=head1 HOW TO RUN C<bff-tools>

This script supports four B<modes>: C<vcf>, C<load>, C<full>, and C<validate>.

B<* Mode C<vcf>>

Annotates a gzipped VCF file (optional) and serializes it into the Beacon-Friendly Format (BFF) as C<genomicVariationsVcf.json.gz>.

B<* Mode C<load>>

Loads BFF-formatted JSON files - including metadata and genomic variations - into a MongoDB instance.

B<* Mode C<full>>

Combines C<vcf> and C<load>: it processes a VCF file and ingests the resulting data into MongoDB.

B<* Mode C<validate>>

Validates metadata files (XLSX or JSON) against the Beacon v2 schema definitions and serializes them into BFF JSON collections.  
Note: This mode uses a separate internal script and does not require a parameters or configuration file.

To perform these tasks, you may need:

=over

=item * A gzipped VCF file (for modes: C<vcf> and C<full>)

Note: It does not need to be bgzipped.

=item * A parameters file (optional)

YAML file with job-specific values and metadata file references. Recommended for structured processing.

=item * BFF JSON files (required for modes: C<load> and C<full>)

See L<Beacon-Friendly Format (BFF)|/#what-is-the-beacon-friendly-format-bff> for a detailed explanation.

=item * Metadata files (XLSX or JSON) (for mode: C<validate>)

You can start with the provided Excel template and use C<--gv> or C<--ignore-validation> flags if needed.

=item * Threads (only for C<vcf> and C<full> modes)

You can set the number of threads using C<-t>. However, since SnpEff doesn't parallelize efficiently, it's best to use C<-t 1> and distribute the work (e.g., by chromosome) using GNU C<parallel> or the included L<queue system|https://github.com/CNAG-Biomedical-Informatics/beacon2-cbi-tools/tree/main/utils/bff_queue>).

=back

C<bff-tools> will create an independent project directory C<projectdir> and store all needed information needed there. Thus, many concurrent calculations are supported.
Note that C<bff-tools> will treat your data as I<read-only> (i.e., will not modify your original files).

B<Annex: Parameters file> (YAML)

Example for C<vcf> mode:

 --
 genome: hs37 # default hg19
 annotate: true # default true
 bff2html: true # default false

Example for C<load> mode:

 --
 bff:
   metadatadir: .
   analyses: analyses.json
   biosamples: biosamples.json
   cohorts: cohorts.json
   datasets: datasets.json
   individuals: individuals.json
   runs: runs.json
   # Note that genomicVariationsVcf is not affected by <metadatadir>
   genomicVariationsVcf: beacon_XXXX/vcf/genomicVariationsVcf.json.gz
 projectdir: my_project

Example for C<full> mode:

 --
 genome: hs37 # default hg19
 annotate: true # default true
 bff:
   metadatadir: .
   analyses: analyses.json
   runs: runs.json
 projectdir: my_project

Please find below a detailed description of all parameters (alphabetical order):

=over

=item B<annotate>

When the B<annotate> parameters is set to C<true> (default), the tool will perform annotation on the provided VCF file. This process involves running snpEff to enrich the VCF with annotation data by leveraging databases such as dbNFSP, ClinVar, and COSMIC. In this mode, the tool will generate and populate the ANN fields based on the analysis.

If the B<annotate> parameters is iset to C<false>, the tool assumes that the VCF file has already been annotated (i.e., it already contains the ANN fields). In this case, it will skip the annotation step and directly parse the existing ANN fields. If you choose this route, please make sure to modify the file C<lib/internal/complete/config.yaml> with your own values.

=item B<bff>

Location for the Beacon Friendly Format JSON files.

=item B<center>

Experimental feature. Not used for now.

=item B<datasetid>

An unique identifier for the dataset present in the input VCF. Default value is 'id_1'

=item B<genome>

Your reference genome.

Accepted values: hg19, hg38 and hs37.

If you used GATKs GRCh37/b37 set it to hg19.

Not supported: NCBI36/hg18, NCBI35/hg17, NCBI34/hg16, hg15 and older.

=item B<organism>

Experimental feature. Not used for now.

=item B<bff2html>

Set bff2html to C<true> to create HTML for the BFF Genomic Variations Browser.

=item B<projectdir>

The prefix for dir name (e.g., 'cancer_sample_001'). Note that it can also contain a path (e.g., /workdir/cancer_sample_001).
The script will automatically add an unique identifier to each job.

=item B<technology>

Experimental feature. Not used for now.

=back

B<Examples:>

  $ bin/bff-tools vcf -i input.vcf.gz 

  $ bin/bff-tools vcf -i input.vcf.gz -p param.yaml -projectdir-override beacon_exome_id_123456789

  $ bin/bff-tools load -p param_file  # MongoDB load only

  $ bin/bff-tools full -t 1 --i input.vcf.gz -p param_file  > log 2>&1

  $ bin/bff-tools full -t 1 --i input.vcf.gz -p param_file -c config_file > log 2>&1

  $ bin/bff-tools validate -i my_data.xlsx -o outdir

  $ nohup $path_to_beacon/bin/bff-tools full -i input.vcf.gz -verbose

  $ parallel "bin/bff-tools vcf -t 1 -i chr{}.vcf.gz  > chr{}.log 2>&1" ::: {1..22} X Y

I<NB>: If you don't want colors in the output use the flag C<--no-color>. If you did not use the flag and want to get rid off the colors in your printed log file use this command to parse ANSI colors:

  perl -pe 's/\x1b\[[0-9;]*[mG]//g'

B<Note:> The script creates C<log> files for all the processes. For instance, when running in C<vcf> mode you can check via C<tail -f> command:

  $ tail -f <your_job_id/vcf/run_vcf2bff.log

=head2 WHAT IS THE BEACON FRIENDLY FORMAT (BFF)

The Beacon Friendly Format is a data exchange format consisting up to  7 JSON files (JSON arrays) that match the 7 schemas from L<Beacon v2 Models|https://docs.genomebeacons.org/schemas-md/analyses_defaultSchema/>.

Six files correspond to Metadata (C<analyses.json,biosamples.json,cohorts.json,datasets.json,individuals.json,runs.json>) and one corresponds to variations (C<genomicVariations.json>).

Normally, C<bff-tools> script is used to create C<genomicVariations> JSON file. The other 6 files are created with L<this utility|https://github.com/CNAG-Biomedical-Informatics/beacon2-cbi-tools/tree/main/utils/bff_validator> (part of the distribution). See instructions L<here|https://github.com/CNAG-Biomedical-Informatics/beacon2-cbi-tools/tree/main/utils/bff_validator/README.md>.

Once we have all seven files, then we can proceed to load the data into MongoDB.

=head1 COMMON ERRORS: SYMPTOMS AND TREATMENT

  * Perl: 
          * Execution errors:
            - Error with YAML::XS
              Solution: Make sure the YAML (config.yaml or parameters file) is well formatted (e.g., space after param:' ').

  * Bash: 
          (Possible errors that can happen when the embeded Bash scripts are executed)
          * bcftools errors: bcftools is nit-picky about VCF fields and nomenclature of contigs/chromosomes in reference genome
                 => Failed to execute: beacon_161855926405757/run_vcf2bff.sh
                    Please check this file beacon_161855926405757/run_vcf2bff.log
            - Error: 
                   # Running bcftools
                   [E::faidx_adjust_position] The sequence "22" was not found
              Solution: Make sure you have set the correct genome (e.g., hg19, hg38 or hs37) in parameters_file.
                        In this case bcftools was expecting to find 22 in the <*.fa.gz> file from reference genome, but found 'chr22' instead.
                  Tips:
                       - hg{19,38} use 'chr' in chromosome naming (e.g., chr1)
                       - hs37 does not use 'chr' in chromosome naming (e.g., 1)
        
             - Error
                  # Running bcftools
                  INFO field IDREP only contains 1 field, expecting 2
               Solution: Please Fix VCF info field manually (or get rid of problematic fields with bcftools)
                         e.g., bcftools annotate -x INFO/IDREP input.vcf.gz | gzip > output.vcf.gz
                               bcftools annotate -x INFO/MLEAC,INFO/MLEAF,FMT/AD,FMT/PL input.vcf.gz  | gzip > output.vcf.gz
             
                   
    NB: The bash scripts can be executed "manually" in the beacon_XXX dir. You must provide the 
        input vcf as an argument. This is a good option for debugging. 

=head2 KNOWN ISSUES

  * Some Linux distributions do not include perldoc and thus Perl's library Pod::Usage will complain.
    Please, install it (sudo apt install perl-doc) if needed.

=head1 CITATION

The author requests that any published work that utilizes B<B2RI> includes a cite to the the following reference:

Rueda, M, Ariosa R. "Beacon v2 Reference Implementation: a toolkit to enable federated sharing of genomic and phenotypic data". I<Bioinformatics>, btac568, https://doi.org/10.1093/bioinformatics/btac568

=head1 AUTHOR

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.eu>

Credits: 

  * Sabela De La Torre (SDLT) created a Bash script for Beacon v1 to parse vcf files L<https://github.com/ga4gh-beacon/beacon-elixir>.
  * Toshiaki Katayamai re-implemented the Beacon v1 script in Ruby.
  * Later Dietmar Fernandez-Orth (DFO) modified the Ruby for Beacon v2 L<https://github.com/ktym/vcftobeacon and added post-processing with R, from which I borrowed ideas to implement vcf2bff.pl.
  * DFO for usability suggestions and for creating bcftools/snpEff commands.
  * Roberto Ariosa for help with MongoDB implementation.
  * Mauricio Moldes helped with the containerization.

=head1 COPYRIGHT and LICENSE

This PERL file is copyrighted. See the LICENSE file included in this distribution.

=cut
