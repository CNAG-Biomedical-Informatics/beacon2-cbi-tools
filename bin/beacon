#!/usr/bin/env perl
#
#   Script with multiple functions:
#   - vcf mode: Annotates VCF, serializes to BFF
#   - mongodb mode: Transfers BFF data to MongoDB
#   - full mode: Combines vcf and mongodb modes
#
#   Last Modified: May/24/2024
#
#   Version: 2.0.6
#
#   Copyright (C) 2021-2025 Manuel Rueda (manuel.rueda@cnag.eu)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <https://www.gnu.org/licenses/>.
#
#   If this program helps you in your research, please cite.

use strict;
use warnings;
use autodie;
use feature qw(say);
use Cwd qw(abs_path);
use Term::ANSIColor qw(:constants);
use JSON::XS;
use Path::Tiny;
use Data::Dumper;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use BEACON::Help;
use BEACON::Config;
use BEACON::Beacon;

#############################################################
#            Variables definition                           #
#############################################################

# Beacon version
my $version = '2.0.6';

# Initialize a few more variables
my $prompt      = 'Info:';
my $warn        = 'Warn:';
my $error       = 'Error:';
my $spacer      = '*' x 32;
my $arrow       = '=>';
my $cmd         = '';
my $author      = '(C) 2021-2025 Manuel Rueda, PhD';
my $license     = 'GNU General Public License v3';
my $beacon_path = abs_path($0);

# We personalize the STDERR (warn/die) messages
$SIG{__WARN__} = sub { warn BOLD YELLOW "$warn ", @_ };
$SIG{__DIE__} =
  sub { die BOLD RED "$error ", scalar localtime, "\n$error $arrow ", @_ };

# We tell Perl to flush right away STDOUT data
$| = 1;

# Format for Data::Dumper
$Data::Dumper::Terse = 1;

##############################################################
#                 Code starts here                           #
##############################################################

# Parsing arguments/options and getting help if needed
my $arg = Help::usage($version);

# Reading the configuration values from the config file
# NB: We'll avoid assigning $param->{foo} to vars unless their value changes often
my $config = Config::read_config_file( $arg->{configfile} );

# Reading the parameters from the paramaters file.
my $param = Config::read_param_file($arg);

# Start printing information
say $prompt;
say BOLD CYAN "$prompt Beacon $version", RESET;
say "$prompt Beacon exe: $beacon_path";
say "$prompt $author";
say "$prompt $license\n$prompt";

# Print arguments to stdout
say BOLD YELLOW, "$prompt ARGUMENTS USED:", RESET;
say WHITE "$prompt mode: $arg->{mode}";
my @tmp_keys = qw (inputfile configfile paramfile ncpu debug verbose nocolor);
my @tmp_vals = qw ( i c p n debug verbose nc);
my %argument;
@argument{@tmp_keys} = @tmp_vals;
for my $argument ( sort keys %argument ) {
    say WHITE "$prompt --$argument{$argument} $arg->{$argument}"
      if $arg->{$argument};
}

# Printing the config values to stdout according to the format below
say WHITE "$prompt";
say BOLD BLUE, "$prompt CONFIGURATION VALUES:", RESET;

$~ = "CONFIG";
my $l_config = '';
foreach $l_config ( sort keys %{$config} ) {
    write;
}

format CONFIG =
@|||||@<<<<<<<<<<<<<<<< @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$prompt, $l_config, $arrow, $config->{$l_config}
.

# Printing the params to stdout according to the format below
say WHITE "$prompt";
say BOLD GREEN, "$prompt BEACON PARAMETERS:", RESET;

# Creating a tmp hash to deal with 2D hash
my %tmp_param = %{$param};

for my $nested (qw (pipeline bff ega)) {
    $tmp_param{$nested} = 'See ' . $tmp_param{log};
}
$~ = "PARAMS";
my $l_param = '';
foreach $l_param ( sort keys %tmp_param ) {
    write;
}

format PARAMS =
@|||||@<<<<<<<<<<<<<<<< @<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$prompt, $l_param, $arrow, $tmp_param{$l_param}
.

# Start Beacon
say $prompt;
say BOLD CYAN "$prompt STARTING BEACON FUN";
say RESET "$prompt $spacer";

# Create the working dir
mkdir $param->{projectdir};

# Creating a log file in JSON
my $coder = JSON::XS->new->utf8->canonical->pretty;
my $json =
  $coder->encode( { arg => $arg, config => $config, param => $param } ); # keys created on the fly with anonymous hash
my $job_log = $param->{log};
path($job_log)->spew($json);

# We'll use a ref to an anonymous hash to load the object $beacon
my $genome     = $param->{genome};    # To alleviate nomenclature
my $rah_beacon = {
    jobid        => $param->{jobid},
    datasetid    => $param->{datasetid},
    inputfile    => $arg->{inputfile},
    projectdir   => $param->{projectdir},
    bcftools     => $config->{bcftools},
    snpeff       => $config->{snpeff},
    snpsift      => $config->{snpsift},
    tmpdir       => $config->{tmpdir},
    genome       => $genome,
    clinvar      => $config->{"${genome}clinvar"},
    cosmic       => $config->{"${genome}cosmic"},
    dbnsfp       => $config->{"${genome}dbnsfp"},
    reference    => $config->{"${genome}fasta"},
    dbnsfpset    => $config->{dbnsfpset},
    vcf2bff      => $config->{vcf2bff},
    zip          => $param->{zip},
    bff2json     => $config->{bff2json},
    json2html    => $config->{json2html},
    bash4bff     => $config->{bash4bff},
    bash4html    => $config->{bash4html},
    bash4mongodb => $config->{bash4mongodb},
    browserdir   => $config->{browserdir},
    paneldir     => $config->{paneldir},
    gvvcfjson    => $param->{gvvcfjson},
    mongoimport  => $config->{mongoimport},
    mongodburi   => $config->{mongodburi},
    mongosh      => $config->{mongosh},
    bff          => $param->{bff},
    debug        => $arg->{debug},
    verbose      => $arg->{verbose}
};

# Loading the object
my $beacon = Beacon->new($rah_beacon);

# Now submitting the pipelines (order matters) through bash scripts
my @pipelines = ( 'vcf2bff', 'bff2html', 'bff2mongodb' );
for my $pipeline (@pipelines) {
    if ( $param->{pipeline}{$pipeline} ) {
        say "$prompt Running the pipeline ", uc($pipeline), '...';
        $beacon->$pipeline();
    }
}

# End Beacon
say "$prompt $spacer";
say BOLD GREEN, "$prompt BEACON FINISHED OK", RESET;

# Optional message
say "$prompt Date: ",            scalar localtime if $arg->{verbose};
say "$prompt Running time(s): ", time - $^T       if $arg->{verbose};

# Say goodbye message
my $goodbye = GoodBye->new();
say WHITE, $prompt, ' ', $goodbye->say_goodbye();

##############################################################
#                   Code ends here                           #
##############################################################

__END__

=head1 NAME

C<beacon>: A script to B<annotate> and B<transform> B<VCFs> into the C<genomicVariations> entity of the Beacon v2 Models. The script also supports ingesting the data into a B<MongoDB> instance. It is part of the C<beacon2-ri-tools> repository.

=head1 SYNOPSIS

 beacon <mode> [-arguments] [-options]

   Mode:
     vcf
       -i | --input <file>            Requires a VCF.gz file
                                      (May require a parameters file)

     mongodb
                                      (May require a parameters file)

     full (vcf + mongodb)
       -i | --input <file>            Requires a VCF.gz file
                                      (May require a parameters file)

   Options:
       -h                             Brief help message
       -man                           Full documentation
       -v                             Display version information
       -c | --config <file>           Requires a configuration file
       -p | --param <file>            Requires a parameters file (optional)
       -n <number>                    Number of CPUs/cores/threads (optional)
       -debug <level>                 Print debugging information (from 1 to 5, with 5 being the max) (optional)
       -verbose                       Enable verbosity (optional)
       -nc | --no-color               Do not print colors to STDOUT (optional)

=head1 DESCRIPTION

=head3 C<beacon>

C<beacon>, a script with three operational modes for diverse actions:

=over

=item Mode C<vcf>

Converts B<genomic variation data> (VCF) into queryable MongoDB format. Extended documentation is available L<here|https://b2ri-documentation.readthedocs.io/en/latest/data-ingestion>. The VCF data are annotated and serialized into C<genomicVariationsVcf.json.gz>.

=item Mode C<mongodb>

Facilitates loading L<BFF|/#what-is-the-beacon-friendly-format-bff> data into MongoDB.

=item Mode C<full>: Combines modes C<vcf> and C<mongodb>

=back

=head1 HOW TO RUN C<beacon>

We recommend following this L<tutorial|https://b2ri-documentation.readthedocs.io/en/latest/tutorial-data-beaconization>.

This script has three B<modes>: C<vcf, mongodb> and C<full>

B<* Mode C<vcf>>

Annotating and serializing a VCF file into a BFF file for genomic variations.

B<* Mode C<mongodb>>

Loading BFF data into MongoDB.

B<* Mode C<full>>

Mode vcf + mode mongodb.

To perform all these taks you'll need: 

=over

=item * A gzipped VCF 

Note that it does not need to be bgzipped.

=item * (Optional) A parameters file

A parameters text file that will contain specific values needed for the job.

=item * BFF files (only for modes: mongodb and full)

(see explanation of BFF format L<here|/#what-is-the-beacon-friendly-format-bff>)

=item * (Optional) Specify the number of cores (only for VCF processing!)

The number of threads/cores you want to use for the job. In this regard (since SnpEff does not deal well with parallelization) we recommend using C<-n 1> and running multiple simultaneous jobs with GNU C<parallel> or the included L<queue system|https://github.com/mrueda/beacon2-ri-tools/tree/main/utils/bff_queue>). The software scales linearly {O}(n) with the number of variations present in the input file. The easiest way is to run one job per chromosome, but if you are in a hurry and have many cores you can split each chromosome into smaller vcfs.

=back

C<beacon> will create an independent project directory C<projectdir> and store all needed information needed there. Thus, many concurrent calculations are supported.
Note that C<beacon> will treat your data as I<read-only> (i.e., will not modify your original files).

B<Annex: Parameters file> (YAML)

Example for C<mongodb> mode:

 --
 bff:
   metadatadir: .
   analyses: analyses.json
   biosamples: biosamples.json
   cohorts: cohorts.json
   datasets: datasets.json
   individuals: individuals.json
   runs: runs.json
   # Note that genomicVariationsVcf is not affected by <metadatadir>
   genomicVariationsVcf: beacon_XXXX/vcf/genomicVariationsVcf.json.gz
 projectdir: my_project

Please find below a detailed description of all parameters (alphabetical order):

=over

=item B<bff>

Location for the Beacon Friendly Format JSON files.

=item B<center>

Experimental feature. Not used for now.

=item B<datasetid>

An unique identifier for the dataset present in the input VCF. Default value is 'id_1'

=item B<ega>

(For EGA internal use only)

egac: EGA DAC Accession ID.

egad: EGA Dataset Accession ID.

egas: EGA Study Accession ID.

=item B<genome>

Your reference genome.

Accepted values: hg19, hg38 and hs37.

If you used GATKs GRCh37/b37 set it to hg19.

Not supported: NCBI36/hg18, NCBI35/hg17, NCBI34/hg16, hg15 and older.

=item B<organism>

Experimental feature. Not used for now.

=item B<bff2html>

Set bff2html to C<true> to create HTML for the BFF Genomic Variations Browser.

=item B<projectdir>

The prefix for dir name (e.g., 'cancer_sample_001'). Note that it can also contain a path (e.g., /workdir/cancer_sample_001).
The script will automatically add an unique identifier to each job.

=item B<technology>

Experimental feature. Not used for now.

=back

B<Examples:>

  $ ./beacon vcf -i input.vcf.gz 

  $ ./beacon mongodb -p param_file  # MongoDB load only

  $ ./beacon full -n 1 --i input.vcf.gz -p param_file  > log 2>&1

  $ ./beacon full -n 1 --i input.vcf.gz -p param_file -c config_file > log 2>&1

  $ nohup $path_to_beacon/beacon full -i input.vcf.gz -verbose

  $ parallel "./beacon vcf -n 1 -i chr{}.vcf.gz  > chr{}.log 2>&1" ::: {1..22} X Y

I<NB>: If you don't want colors in the output use the flag C<--no-color>. If you did not use the flag and want to get rid off the colors in your printed log file use this command to parse ANSI colors:

  perl -pe 's/\x1b\[[0-9;]*[mG]//g'

B<Note:> The script creates C<log> files for all the processes. For instance, when running in C<vcf> mode you can check via C<tail -f> command:

  $ tail -f <your_job_id/vcf/run_vcf2bff.log

=head2 WHAT IS THE BEACON FRIENDLY FORMAT (BFF)

The Beacon Friendly Format is a data exchange format consisting up to  7 JSON files (JSON arrays) that match the 7 schemas from L<Beacon v2 Models|https://docs.genomebeacons.org/schemas-md/analyses_defaultSchema/>.

Six files correspond to Metadata (C<analyses.json,biosamples.json,cohorts.json,datasets.json,individuals.json,runs.json>) and one corresponds to variations (C<genomicVariations.json>).

Normally, C<beacon> script is used to create C<genomicVariations> JSON file. The other 6 files are created with L<this utility|https://github.com/mrueda/beacon2-ri-tools/tree/main/utils/bff_validator> (part of the distribution). See instructions L<here|https://github.com/mrueda/beacon2-ri-tools/tree/main/utils/bff_validator/README.md>.

Once we have all seven files, then we can proceed to load the data into MongoDB.

=head1 COMMON ERRORS: SYMPTOMS AND TREATMENT

  * Perl: 
          * Execution errors:
            - Error with YAML::XS
              Solution: Make sure the YAML (config.yaml or parameters file) is well formatted (e.g., space after param:' ').

  * Bash: 
          (Possible errors that can happen when the embeded Bash scripts are executed)
          * bcftools errors: bcftools is nit-picky about VCF fields and nomenclature of contigs/chromosomes in reference genome
                 => Failed to execute: beacon_161855926405757/run_vcf2bff.sh
                    Please check this file beacon_161855926405757/run_vcf2bff.log
            - Error: 
                   # Running bcftools
                   [E::faidx_adjust_position] The sequence "22" was not found
              Solution: Make sure you have set the correct genome (e.g., hg19, hg38 or hs37) in parameters_file.
                        In this case bcftools was expecting to find 22 in the <*.fa.gz> file from reference genome, but found 'chr22' instead.
                  Tips:
                       - hg{19,38} use 'chr' in chromosome naming (e.g., chr1)
                       - hs37 does not use 'chr' in chromosome naming (e.g., 1)
        
             - Error
                  # Running bcftools
                  INFO field IDREP only contains 1 field, expecting 2
               Solution: Please Fix VCF info field manually (or get rid of problematic fields with bcftools)
                         e.g., bcftools annotate -x INFO/IDREP input.vcf.gz | gzip > output.vcf.gz
                               bcftools annotate -x INFO/MLEAC,INFO/MLEAF,FMT/AD,FMT/PL input.vcf.gz  | gzip > output.vcf.gz
             
                   
    NB: The bash scripts can be executed "manually" in the beacon_XXX dir. You must provide the 
        input vcf as an argument. This is a good option for debugging. 

=head2 KNOWN ISSUES

  * Some Linux distributions do not include perldoc and thus Perl's library Pod::Usage will complain.
    Please, install it (sudo apt-get install perl-doc) if needed.

=head1 CITATION

The author requests that any published work that utilizes B<B2RI> includes a cite to the the following reference:

Rueda, M, Ariosa R. "Beacon v2 Reference Implementation: a toolkit to enable federated sharing of genomic and phenotypic data". I<Bioinformatics>, btac568, https://doi.org/10.1093/bioinformatics/btac568

=head1 AUTHOR

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.eu>

Credits: 

  * Sabela De La Torre (SDLT) created a Bash script for Beacon v1 to parse vcf files L<https://github.com/ga4gh-beacon/beacon-elixir>.
  * Toshiaki Katayamai re-implemented the Beacon v1 script in Ruby.
  * Later Dietmar Fernandez-Orth (DFO) modified the Ruby for Beacon v2 L<https://github.com/ktym/vcftobeacon and added post-processing with R, from which I borrowed ideas to implement vcf2bff.pl.
  * DFO for usability suggestions and for creating bcftools/snpEff commands.
  * Roberto Ariosa for help with MongoDB implementation.
  * Mauricio Moldes helped with the containerization.

=head1 COPYRIGHT and LICENSE

This PERL file is copyrighted, (C) 2021-2025 Manuel Rueda. See the LICENSE file included in this distribution.

=cut
